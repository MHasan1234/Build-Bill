import Invoice from "../models/Invoice.js";
import PDFDocument from "pdfkit";


export const generateInvoicePDF = async (req, res) => {
  try {
    const invoice = await Invoice.findOne({
      _id: req.params.id,
      user: req.user.userId,
    });

    if (!invoice) {
      return res.status(404).json({ error: "Invoice not found or unauthorized" });
    }

    
    const doc = new PDFDocument({
      margin: 50,
      size: 'A4',
      info: {
        Title: `Invoice ${invoice._id}`,
        Author: 'BuildBill',
        Creator: 'BuildBill'
      }
    });

    
    res.setHeader("Content-Type", "application/pdf");
    res.setHeader("Content-Disposition", `inline; filename=invoice_${invoice._id}.pdf`);
    res.setHeader("Cache-Control", "no-cache");

    
    doc.pipe(res);

    
    doc.fontSize(20).text('INVOICE', { align: 'center' });
    doc.moveDown();

    
    doc.fontSize(12);
    doc.text(`Invoice ID: ${invoice._id.toString().slice(-8).toUpperCase()}`);
    doc.text(`Date: ${new Date(invoice.createdAt).toLocaleDateString()}`);
    doc.text(`Status: ${invoice.status}`);
    doc.moveDown();

    
    doc.fontSize(14).text('BILL TO:', { underline: true });
    doc.fontSize(12);
    doc.text(`Name: ${invoice.clientName || 'N/A'}`);
    doc.text(`Email: ${invoice.clientEmail || 'N/A'}`);
    doc.moveDown();

    
    doc.fontSize(14).text('ITEMS:', { underline: true });
    doc.moveDown();

  
    doc.text('Description', 50, doc.y);
    doc.text('Qty', 300, doc.y);
    doc.text('Rate', 350, doc.y);
    doc.text('Amount', 450, doc.y);
    

    doc.moveTo(50, doc.y + 5)
       .lineTo(550, doc.y + 5)
       .stroke();
    
    doc.moveDown();

    
    (invoice.items || []).forEach((item, index) => {
      const quantity = Number(item.quantity) || 0;
      const rate = Number(item.rate) || 0;
      const description = item.description || 'No description';
      const total = quantity * rate;

      doc.text(description, 50);
      doc.text(quantity.toString(), 300);
      doc.text(`₹${rate.toFixed(2)}`, 350);
      doc.text(`₹${total.toFixed(2)}`, 450);
      doc.moveDown();
    });

    doc.moveDown();
    
    
    doc.fontSize(16).text(`TOTAL AMOUNT: ₹${(invoice.totalAmount || 0).toFixed(2)}`, { align: 'right' });
    doc.moveDown();

    
    doc.fontSize(10)
       .text('Thank you for your business!', { align: 'center' })
       .text('Generated by BuildBill', { align: 'center' });

  
    doc.end();

  } catch (err) {
    console.error("PDF Generation Error:", err);
    
    
    if (err.message.includes('font') || err.message.includes('read')) {
      res.status(500).json({ 
        error: "PDF generation temporarily unavailable. Please try again later." 
      });
    } else {
      res.status(500).json({ error: "Failed to generate PDF" });
    }
  }
};